// WordPress webpack config.
const defaultConfig = require("@wordpress/scripts/config/webpack.config");

// Plugins.
const RemoveEmptyScriptsPlugin = require("webpack-remove-empty-scripts");
const DependencyExtractionWebpackPlugin = require("@wordpress/dependency-extraction-webpack-plugin");

// Utilities.
// eslint-disable-next-line no-undef
const path = require("path");

const { fromProjectRoot } = require("@wordpress/scripts/utils/file");
const { getWordPressSrcDirectory } = require("@wordpress/scripts/utils");
const { sync: glob } = require("fast-glob");

function getStylesEntryPoints() {
  // Checks whether any block metadata files can be detected in the defined source directory.
  const stylePaths = glob("css/**/*.scss", {
    absolute: false,
    cwd: fromProjectRoot(getWordPressSrcDirectory()),
  });

  let entryPoints = {};

  if (stylePaths.length > 0) {
    for (const stylePath of stylePaths) {
      let fileName = path.basename(stylePath, path.extname(stylePath));

      entryPoints = {
        ...entryPoints,
        ...{
          [path.join(path.dirname(stylePath), fileName)]: path.resolve(
            fromProjectRoot(getWordPressSrcDirectory()),
            stylePath,
          ),
        },
      };
    }
  }

  return entryPoints;
}

function getScriptsEntryPoints() {
  // Checks whether any block metadata files can be detected in the defined source directory.
  const scriptPaths = glob("js/**/*.js", {
    absolute: false,
    cwd: fromProjectRoot(getWordPressSrcDirectory()),
  });

  let entryPoints = {};

  if (scriptPaths.length > 0) {
    for (const scriptPath of scriptPaths) {
      let fileName = path.basename(scriptPath, path.extname(scriptPath));

      entryPoints = {
        ...entryPoints,
        ...{
          [path.join(path.dirname(scriptPath), fileName)]: path.resolve(
            fromProjectRoot(getWordPressSrcDirectory()),
            scriptPath,
          ),
        },
      };
    }
  }

  return entryPoints;
}

/**
 * Externalize 'scripts' that are registered outside the plugin
 *
 * @param {string} request Requested module
 *
 * @return {(string|undefined)} Script global
 */
function requestToExternal(request) {
  if (request === "first-wave-gsap") {
    return "gsap";
  }

  if (request === "first-wave-scroll-trigger") {
    return "ScrollTrigger";
  }
}

// Add any new entry points by extending the webpack config.
module.exports = {
  ...defaultConfig,
  ...{
    entry: {
      ...getStylesEntryPoints(),
      ...getScriptsEntryPoints(),
    },

    plugins: [
      // Include WP's plugin config.
      ...defaultConfig.plugins.filter(
        (plugin) => plugin.constructor.name !== "RtlCssPlugin",
      ),
      // Add external dependencies.
      new DependencyExtractionWebpackPlugin({
        requestToExternal,
      }),
      // Removes the empty `.js` files generated by webpack but
      // sets it after WP has generated its `*.asset.php` file.
      new RemoveEmptyScriptsPlugin({
        stage: RemoveEmptyScriptsPlugin.STAGE_AFTER_PROCESS_PLUGINS,
      }),
    ],
  },
};
